[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "yamms"
version = "0.1.0"
description = "Yet Another Mark Management System - Ein DSGVO-freundliches Notenverwaltungstool"
readme = "README.md"
license = "Apache-2.0"
authors = [
    {name = "YAMMS Contributors"}
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Education",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Topic :: Education",
    "Topic :: Office/Business",
]
requires-python = ">=3.12"
dependencies = [
    "pyside6>=6.9.0",
    "sqlmodel>=0.0.24",
    "pandas>=2.3.0",
    "weasyprint>=66.0",
    "alembic>=1.16.0",
    "loguru>=0.7.3",
    "pydantic-settings>=2.10.0",
    "rich>=13.9.0",
    "platformdirs>=4.3.0",
]

[project.optional-dependencies]
dev = [
    "black>=25.1.0",
    "ruff>=0.12.0",
    "mypy>=1.17.0",
    "pytest>=8.4.0",
    "pytest-cov>=6.3.0",
    "pytest-qt>=4.5.0",
    "pre-commit>=4.3.0",
    "nox>=2025.5.1",
    "bandit>=1.8.0",
    "safety>=3.6.0",
    "pip-audit>=2.9.0",
]
test = [
    "pytest>=8.4.0",
    "pytest-cov>=6.3.0",
    "pytest-qt>=4.5.0",
    "coverage>=7.6.0",
]
docs = [
    "sphinx>=8.2.0",
    "sphinx-rtd-theme>=3.0.0",
    "myst-parser>=4.0.0",
]
build = [
    "pyinstaller>=6.15.0",
    "bump2version>=1.0.0",
]

[project.urls]
Homepage = "https://github.com/MisfitFred/yamms"
Documentation = "https://yamms.readthedocs.io"
Repository = "https://github.com/MisfitFred/yamms.git"
Issues = "https://github.com/MisfitFred/yamms/issues"

[project.scripts]
yamms = "yamms.main:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["yamms*"]

[tool.black]
line-length = 88
target-version = ['py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.mypy_cache
  | \.nox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
target-version = "py312"
line-length = 88

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]

[tool.mypy]
python_version = "3.12"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "8.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=yamms",
    "--cov-report=term-missing",
    "--cov-report=html",
]
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "ui: marks tests as UI tests",
]

[tool.coverage.run]
source = ["yamms"]
omit = [
    "*/tests/*",
    "*/test_*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
